 <<< Combine >>> 
>>> including systematics
>>> method used is AsymptoticLimits
>>> random number generator seed is 123456
Computing results starting from observation (a-posteriori)
[#0] ERROR:Eval -- RooAbsReal::logEvalError(model_s) evaluation error, 
 origin       : RooProdPdf::model_s[ modelObs_s * nuisancePdf ]
 message      : getLogVal() top-level p.d.f evaluates to zero
 server values: !pdfs=(modelObs_s = 0/1,nuisancePdf = 1)

 -- AsymptoticLimits ( CLs ) --
Observed Limit: r < 0.3689
Expected  2.5%: r < 0.1999
Expected 16.0%: r < 0.2656
Expected 50.0%: r < 0.3682
Expected 84.0%: r < 0.5120
Expected 97.5%: r < 0.6805

Done in 0.01 min (cpu), 0.01 min (real)
 <<< Combine >>> 
>>> including systematics
>>> method used is AsymptoticLimits
>>> random number generator seed is 123456
Computing results starting from observation (a-posteriori)
[#0] ERROR:Eval -- RooAbsReal::logEvalError(model_s) evaluation error, 
 origin       : RooProdPdf::model_s[ modelObs_s * nuisancePdf ]
 message      : getLogVal() top-level p.d.f evaluates to zero
 server values: !pdfs=(modelObs_s = 0/1,nuisancePdf = 1)

 -- AsymptoticLimits ( CLs ) --
Observed Limit: r < 0.2293
Expected  2.5%: r < 0.1246
Expected 16.0%: r < 0.1656
Expected 50.0%: r < 0.2295
Expected 84.0%: r < 0.3191
Expected 97.5%: r < 0.4242

Done in 0.01 min (cpu), 0.01 min (real)
 <<< Combine >>> 
>>> including systematics
>>> method used is AsymptoticLimits
>>> random number generator seed is 123456
Computing results starting from observation (a-posteriori)
[#0] ERROR:Eval -- RooAbsReal::logEvalError(model_s) evaluation error, 
 origin       : RooProdPdf::model_s[ modelObs_s * nuisancePdf ]
 message      : getLogVal() top-level p.d.f evaluates to zero
 server values: !pdfs=(modelObs_s = 0/1,nuisancePdf = 1)

 -- AsymptoticLimits ( CLs ) --
Observed Limit: r < 0.2585
Expected  2.5%: r < 0.1405
Expected 16.0%: r < 0.1867
Expected 50.0%: r < 0.2588
Expected 84.0%: r < 0.3588
Expected 97.5%: r < 0.4776

Done in 0.01 min (cpu), 0.01 min (real)
