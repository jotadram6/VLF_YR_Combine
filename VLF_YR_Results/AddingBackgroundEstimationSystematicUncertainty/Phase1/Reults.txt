 <<< Combine >>> 
>>> including systematics
>>> method used is AsymptoticLimits
>>> random number generator seed is 123456
Computing results starting from observation (a-posteriori)
[#0] ERROR:Eval -- RooAbsReal::logEvalError(model_s) evaluation error, 
 origin       : RooProdPdf::model_s[ modelObs_s * nuisancePdf ]
 message      : getLogVal() top-level p.d.f evaluates to zero
 server values: !pdfs=(modelObs_s = 0/1,nuisancePdf = 1)

 -- AsymptoticLimits ( CLs ) --
Observed Limit: r < 0.2183
Expected  2.5%: r < 0.1167
Expected 16.0%: r < 0.1570
Expected 50.0%: r < 0.2197
Expected 84.0%: r < 0.3056
Expected 97.5%: r < 0.4090

Done in 0.02 min (cpu), 0.02 min (real)
 <<< Combine >>> 
>>> including systematics
>>> method used is AsymptoticLimits
>>> random number generator seed is 123456
Computing results starting from observation (a-posteriori)
[#0] ERROR:Eval -- RooAbsReal::logEvalError(model_s) evaluation error, 
 origin       : RooProdPdf::model_s[ modelObs_s * nuisancePdf ]
 message      : getLogVal() top-level p.d.f evaluates to zero
 server values: !pdfs=(modelObs_s = 0/1,nuisancePdf = 1)

 -- AsymptoticLimits ( CLs ) --
Observed Limit: r < 0.1345
Expected  2.5%: r < 0.0692
Expected 16.0%: r < 0.0955
Expected 50.0%: r < 0.1353
Expected 84.0%: r < 0.1897
Expected 97.5%: r < 0.2538

Done in 0.02 min (cpu), 0.02 min (real)
 <<< Combine >>> 
>>> including systematics
>>> method used is AsymptoticLimits
>>> random number generator seed is 123456
Computing results starting from observation (a-posteriori)
[#0] ERROR:Eval -- RooAbsReal::logEvalError(model_s) evaluation error, 
 origin       : RooProdPdf::model_s[ modelObs_s * nuisancePdf ]
 message      : getLogVal() top-level p.d.f evaluates to zero
 server values: !pdfs=(modelObs_s = 0/1,nuisancePdf = 1)

 -- AsymptoticLimits ( CLs ) --
Observed Limit: r < 0.1520
Expected  2.5%: r < 0.0643
Expected 16.0%: r < 0.1043
Expected 50.0%: r < 0.1470
Expected 84.0%: r < 0.2120
Expected 97.5%: r < 0.2854

Done in 0.02 min (cpu), 0.02 min (real)
